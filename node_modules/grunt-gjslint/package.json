{
  "name": "grunt-gjslint",
  "description": "Validate files with Google Linter.",
  "version": "0.1.0",
  "homepage": "https://github.com/jmendiara/grunt-gjslint",
  "author": {
    "name": "Javier Mendiara CaÃ±ardo",
    "email": "jmendiara@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jmendiara/grunt-gjslint.git"
  },
  "bugs": {
    "url": "https://github.com/jmendiara/grunt-gjslint/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jmendiara/grunt-gjslint/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "closure-linter-wrapper": "~0.2.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-gjslint\n\n> Validate files with Google Linter.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1` and *just* python installed\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-gjslint --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-gjslint');\n```\n\n## The \"gjslint\" task\nRun this task with the `grunt gjslint` command.\n\n### Overview\nIn your project's Gruntfile, add a section named `gjslint` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  gjslint: {\n    options: {\n      flags: [\n        '--ignore_errors 220' //ignore error code 220 from gjslint\n      ],\n      reporter: {\n        name: 'console'\n      }\n    },\n    all: {\n      src: '<%= jshint.all %>'\n    }\n  }\n})\n```\n\nAs this is a Multitask, you can specify several targets to be called sharing the same root options\n\n### Documentation\ngrunt-gjslint uses [node-closure-linter-wrapper](https://github.com/jmendiara/node-closure-linter-wrapper)\nto lint files, and has the --ignore_error custom flag to allow soft linting.\n\nPlease, refer to [node-closure-linter-wrapper documentation](https://github.com/jmendiara/node-closure-linter-wrapper)\nfor flags and reporter reference.\n\n`options.force` flag is a custom option that when disabled, will not fail the grunt task when python is not installed on\nthe computer. It defaults to `true`\n\n\n### Usage Examples\n\nUse a flag file to store the closure-linter flags, and have two different source directories.\nOutput the lint results to the console. You can use wildcards in file paths.\n\n```js\ngrunt.initConfig({\n  gjslint: {\n    options: {\n      flags: [\n          '--flagfile .gjslintrc' //use flag file\n      ],\n      reporter: {\n        name: 'console' //report to console\n      },\n      force: false //don't fail if python is not installed on the computer\n    },\n    lib: {\n      src: ['lib/module/**/*.js', 'lib/foo.js'],\n    },\n    test: {\n      src: ['test/*.js'],\n    }\n  }\n})\n```\n\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n* v0.1.0 \n  * First version\n",
  "readmeFilename": "README.md",
  "_id": "grunt-gjslint@0.1.0",
  "dist": {
    "shasum": "3312e3307049a81c0494bdf7864e21df5a37c535"
  },
  "_from": "grunt-gjslint@~0.1.0"
}
