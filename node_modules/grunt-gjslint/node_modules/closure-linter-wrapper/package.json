{
  "name": "closure-linter-wrapper",
  "description": "Node Wrapper to allow access to Google Closure Linter from NodeJS",
  "version": "0.2.1",
  "homepage": "https://github.com/jmendiara/node-closure-linter-wrapper",
  "author": {
    "name": "Javier Mendiara Cañardo",
    "email": "jmendiara@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jmendiara/node-closure-linter-wrapper.git"
  },
  "bugs": {
    "url": "https://github.com/jmendiara/node-closure-linter-wrapper/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jmendiara/node-closure-linter-wrapper/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/closure-linter-wrapper",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt simplemocha"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-watch": "~0.2.0",
    "grunt-simple-mocha": "~0.4.0",
    "grunt": "~0.4.1",
    "mocha": "~1.9.0",
    "chai": "~1.5.0",
    "sinon": "~1.6.0"
  },
  "keywords": [],
  "dependencies": {
    "colors": "~0.6.0-1"
  },
  "readme": "# closure-linter-wrapper\n\nNode Wrapper to allow access to [Google Closure Linter](https://developers.google.com/closure/utilities/) from NodeJS\n\nAs Google Linter is coded in python, you MUST have python installed, and accessible in your PATH.\n\nThis wrapper has bundled the [Google Lint v2.3.9 patched by Elad Karako](http://icompile.eladkarako.com/python-patch-ignore-some-of-google-closure-jslinter-gjslint-errors/)\nthat allows you to skip by configuration some detected errors. This version will\nallow your codebase to be transformed step by step, while maintaining fully\nGoogle coding guidelines compliance. Therefore, no aditionally dependencies must be installed, just python.\n\n\n## Getting Started\nInstall the module with: \n```bash\nnpm install closure-linter-wrapper\n```\n\nExecute the linter\n```javascript\nvar gjslint = require('closure-linter-wrapper').gjslint;\ngjslint({\n    flags: ['--nojsdoc'],\n    src: ['test/files/error.js'],\n    reporter: {\n      name: 'console'\n    }\n  }, function(err, result) {\n    if (!err) {\n      console.log('Everything went fine');\n    }\n  }\n);\n```\n\nExecute the automatic style fixer\n```javascript\n// COMING SOON\n```\n\n## Documentation\n### Source Files\nIf you want to specify single source files to be linted, just pass a `src:[Array]` to the gjslint function\n```js\ngjslint({\n    src: ['test/files/baz.js',\n      'test/files/foo.js'\n    ]\n  }, function(err, result) {\n    if (!err) {\n      console.log('Everything went fine');\n    }\n  }\n```\n\nIf you want to lint complete directories (and exclude single files), read about `-r` and `-x` flags below\n\n\n### Flags\nThe configuration flags allow you to customize all the behaviour of the linter. The flags are exactly \nthe same flags you pass to the python linter, plus the flag for ommiting some errors by Elad Karako\n```js\nvar gjslint = require('closure-linter-wrapper').gjslint;\nvar flagsArray = [\n  '--nostrict',\n  '--nojsdoc',\n  '--ignore_errors 220,14'\n];\ngjslint({flags: flagsArray}, function (err, result){});\n```\n\n*TIP*: If you are using JetBrains WebStorm v6, you can enable gjslint. For doing this, you must provide a `config.file` with \nthe flags passed to your linter. You can rehuse this `config.file` and pass it to this linter, by specifying in the \n`--flagfile` flag\n\n#### Flags reference\n```\nclosure_linter.checker:\n  --closurized_namespaces: Namespace prefixes, used for testing ofgoog.provide/require\n    (default: '')\n    (a comma separated list)\n  --ignored_extra_namespaces: Fully qualified namespaces that should be not be reported as extra by the\n    linter.\n    (default: '')\n    (a comma separated list)\n\nclosure_linter.common.simplefileflags:\n  -e,--exclude_directories: Exclude the specified directories (only applicable along with -r or --presubmit)\n    (default: '_demos')\n    (a comma separated list)\n  -x,--exclude_files: Exclude the specified files\n    (default: 'deps.js')\n    (a comma separated list)\n  -r,--recurse: Recurse in to the subdirectories of the given path;\n    repeat this option to specify a list of values\n\nclosure_linter.ecmalintrules:\n  --custom_jsdoc_tags: Extra jsdoc tags to allow\n    (default: '')\n    (a comma separated list)\n\nclosure_linter.error_check:\n  --jslint_error: List of specific lint errors to check. Here is a list of accepted values:\n    - all: enables all following errors.\n    - blank_lines_at_top_level: validatesnumber of blank lines between blocks at top level.\n    - indentation: checks correct indentation of code.\n    - well_formed_author: validates the @author JsDoc tags.\n    - no_braces_around_inherit_doc: forbids braces around @inheritdoc JsDoc tags.\n    - braces_around_type: enforces braces around types in JsDoc tags.\n    - optional_type_marker: checks correct use of optional marker = in param types.\n    - unused_private_members: checks for unused private variables.\n    ;\n    repeat this option to specify a list of values\n    (default: '[]')\n  --[no]strict: Whether to validate against the stricter Closure style. This includes optional_type_marker,\n    well_formed_author, no_braces_around_inherit_doc, indentation, braces_around_type,\n    blank_lines_at_top_level.\n    (default: 'false')\n\nclosure_linter.errorrules:\n  --ignore_errors: List of error codes to ignore.\n    (default: '')\n    (a comma separated list)\n  --[no]jsdoc: Whether to report errors for missing JsDoc.\n    (default: 'true')\n\nclosure_linter.gjslint:\n  --additional_extensions: List of additional file extensions (not js) that should be treated as JavaScript\n    files.\n    (a comma separated list)\n  --[no]beep: Whether to beep when errors are found.\n    (default: 'true')\n  --[no]check_html: Whether to check javascript in html files.\n    (default: 'false')\n  -?,--[no]help: show this help\n  --[no]helpshort: show usage only for this module\n  --[no]helpxml: like --help, but generates XML output\n  --[no]multiprocess: Whether to attempt parallelized linting using the multiprocessing module. Enabled by\n    default on Linux if the multiprocessing module is present (Python 2.6+). Otherwise disabled by default.\n    Disabling may make debugging easier.\n    (default: 'false')\n  --[no]summary: Whether to show an error count summary.\n    (default: 'false')\n  --[no]time: Whether to emit timing statistics.\n    (default: 'false')\n  --[no]unix_mode: Whether to emit warnings in standard unix format.\n    (default: 'false')\n\nclosure_linter.indentation:\n  --[no]debug_indentation: Whether to print debugging information for indentation.\n    (default: 'false')\n\nclosure_linter.runner:\n  --[no]error_trace: Whether to show error exceptions.\n    (default: 'false')\n  --limited_doc_files: List of files with relaxed documentation checks. Will not report errors for missing\n    documentation, some missing descriptions, or methods whose @return tags don't have a matching return\n    statement.\n    (default: 'dummy.js,externs.js')\n    (a comma separated list)\n\ngflags:\n  --flagfile: Insert flag definitions from the given file into the command line.\n    (default: '')\n  --undefok: comma-separated list of flag names that it is okay to specify on the command line even if the\n    program does not define a flag with that name. IMPORTANT: flags in this list that have arguments MUST use\n    the --flag=value format.\n    (default: '')\n```\n### Reporters\n\nSome reporters to output lint information are bundled within this module. Add the `reporter: reporterObject` \nfield to your configuration object passed on execution.\n#### Console\nConsole reporter ouputs info to your console\n```js\nvar gjslint = require('closure-linter-wrapper').gjslint;\ngjslint({\n    flags: flagsArray\n    reporter: {\n      name: 'console'\n    }\n  }, \n  function (err, result) {\n  }\n);\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n* 0.2.1 \n  * gjslint compliance ;)\n\n* 0.2.0 Stable API and Errors\n  * Changed the parameters siganture\n  * Now, all errors are on err parameter from callback\n  * More test!\n\n* 0.1.0 First Implementation\n  * gjslint only\n  * Console Reporter\n\n## License\nCopyright (c) 2013 Javier Mendiara Cañardo  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "closure-linter-wrapper@0.2.1",
  "dist": {
    "shasum": "24f9f83094eb9e2a3c2876ea2d72b37f697482e7"
  },
  "_from": "closure-linter-wrapper@~0.2.0"
}
